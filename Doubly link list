#include <iostream>   // for input and output
using namespace std;

// Define a structure for one node in the doubly linked list
struct Node {
    int data;        // to store the value
    Node* next;      // pointer to the next node
    Node* prev;      // pointer to the previous node
};

// Global pointers for the first (head) and last (tail) nodes
Node* head = NULL;
Node* tail = NULL;

// --------------------------------------------------
// Function to insert a node at the END of the list
// --------------------------------------------------
void insertAtEnd(int value) {
    Node* newNode = new Node();   // create a new node in memory
    newNode->data = value;        // assign the given value
    newNode->next = NULL;         // next will be NULL (last node)
    newNode->prev = NULL;         // prev is also NULL for now

    // If list is empty
    if (head == NULL) {
        head = newNode;           // new node is both head and tail
        tail = newNode;
    } 
    else {
        tail->next = newNode;     // link old tail to new node (forward)
        newNode->prev = tail;     // link new node back to old tail
        tail = newNode;           // update tail to the new node
    }
}

// --------------------------------------------------
// Function to insert a node at the BEGINNING of list
// --------------------------------------------------
void insertAtBeginning(int value) {
    Node* newNode = new Node();   // create a new node
    newNode->data = value;        // set data
    newNode->prev = NULL;         // no previous node yet
    newNode->next = head;         // next will point to current head

    // If list is empty
    if (head == NULL) {
        head = newNode;
        tail = newNode;
    } 
    else {
        head->prev = newNode;     // link old head back to new node
        head = newNode;           // move head pointer to new node
    }
}

// --------------------------------------------------
// Function to display the list in forward direction
// --------------------------------------------------
void displayForward() {
    Node* temp = head;            // start from head
    cout << "Forward: ";
    while (temp != NULL) {        // go until end
        cout << temp->data << " "; // print each node's data
        temp = temp->next;        // move forward
    }
    cout << endl;
}

// --------------------------------------------------
// Function to display the list in backward direction
// --------------------------------------------------
void displayBackward() {
    Node* temp = tail;            // start from tail
    cout << "Backward: ";
    while (temp != NULL) {        // go until before head
        cout << temp->data << " "; // print each node's data
        temp = temp->prev;        // move backward
    }
    cout << endl;
}

// --------------------------------------------------
// Function to delete a specific node (by value)
// --------------------------------------------------
void deleteNode(int value) {
    Node* temp = head;            // start from head

    // Find the node with given value
    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    // If node not found
    if (temp == NULL) {
        cout << "Value " << value << " not found!" << endl;
        return;
    }

    // If node is head
    if (temp == head) {
        head = head->next;        // move head forward
        if (head != NULL)         // if not empty
            head->prev = NULL;    // no previous for new head
        else
            tail = NULL;          // list became empty
    }
    // If node is tail
    else if (temp == tail) {
        tail = tail->prev;        // move tail backward
        tail->next = NULL;        // no next for new tail
    }
    // If node is in middle
    else {
        temp->prev->next = temp->next; // bypass temp
        temp->next->prev = temp->prev;
    }

    delete temp;                  // free memory
    cout << "Node with value " << value << " deleted!" << endl;
}

// --------------------------------------------------
// Function to delete ALL nodes from the list
// --------------------------------------------------
void deleteAll() {
    Node* temp = head;            // start from head
    while (temp != NULL) {
        Node* nextNode = temp->next; // store next node
        delete temp;                 // delete current
        temp = nextNode;             // move to next
    }
    head = NULL;  // reset head and tail
    tail = NULL;
    cout << "All nodes deleted!" << endl;
}

// --------------------------------------------------
// MAIN FUNCTION (Program starts here)
// --------------------------------------------------
int main() {
    // Add nodes at the end
    insertAtEnd(10);
    insertAtEnd(20);
    insertAtEnd(30);

    // Add node at the beginning
    insertAtBeginning(5);

    // Display both directions
    displayForward();    // 5 10 20 30
    displayBackward();   // 30 20 10 5

    // Delete one node
    deleteNode(20);      // delete node having 20

    // Show updated list
    displayForward();    // 5 10 30
    displayBackward();   // 30 10 5

    // Delete all nodes
    deleteAll();

    // Show final (empty) list
    displayForward();

    return 0;  // end of program
}
