#include <iostream>
using namespace std;

struct node {
    int data;
    node* next;
};

node* head = NULL;
node* tail = NULL;

// ?? Remove a node by value
void removeNode(int value) {
    if (head == NULL) {
        cout << "\nList is empty, nothing to remove.\n";
        return;
    }

    if (head->data == value) {
        node* temp = head;
        head = head->next;
        delete temp;

        if (head == NULL)
            tail = NULL;

        cout << "\nNode with value " << value << " deleted from list.\n";
        return;
    }

    node* prev = head;
    node* curr = head->next;

    while (curr != NULL && curr->data != value) {
        prev = curr;
        curr = curr->next;
    }

    if (curr == NULL) {
        cout << "\nValue " << value << " not found in list.\n";
        return;
    }

    prev->next = curr->next;

    if (curr == tail)
        tail = prev;

    delete curr;
    cout << "\nNode with value " << value << " deleted from list.\n";
}

// ?? Remove a node from the end
void removeFromEnd() {
    if (head == NULL) {
        cout << "\nList is empty, nothing to remove.\n";
        return;
    }

    if (head == tail) {
        cout << "\nNode with value " << head->data << " deleted from end.\n";
        delete head;
        head = NULL;
        tail = NULL;
        return;
    }

    node* temp = head;
    while (temp->next != tail) {
        temp = temp->next;
    }

    cout << "\nNode with value " << tail->data << " deleted from end.\n";
    delete tail;
    tail = temp;
    tail->next = NULL;
}

// ?? Remove a node after a given value
void removeAfter(int key) {
    if (head == NULL) {
        cout << "\nList is empty, nothing to remove.\n";
        return;
    }

    node* temp = head;
    while (temp != NULL && temp->data != key) {
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "\nValue " << key << " not found in list.\n";
        return;
    }

    if (temp->next == NULL) {
        cout << "\nNo node exists after " << key << ".\n";
        return;
    }

    node* toDelete = temp->next;
    temp->next = toDelete->next;

    if (toDelete == tail)
        tail = temp;

    cout << "\nNode with value " << toDelete->data << " (after " << key << ") deleted.\n";
    delete toDelete;
}

// ?? Display the linked list
void display() {
    cout << "\nLinked list elements: ";
    node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// ?? Main program
int main() {
    // Manually create linked list nodes
    node* n1 = new node(); n1->data = 10;
    node* n2 = new node(); n2->data = 20;
    node* n3 = new node(); n3->data = 30;
    node* n4 = new node(); n4->data = 40;
    node* n5 = new node(); n5->data = 50;

    n1->next = n2; n2->next = n3; n3->next = n4; n4->next = n5; n5->next = NULL;
    head = n1; tail = n5;

    cout << "Original list:\n";
    display();

    // Remove node by value
    removeNode(30);
    display();

    // Remove node after a given value
    removeAfter(20);
    display();

    // Remove node from the end
    removeFromEnd();
    display();

    return 0;
}
